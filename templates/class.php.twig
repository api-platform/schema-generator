{#
 #  (c) KÃ©vin Dunglas <dunglas@gmail.com>
 #
 #  This source file is subject to the MIT license that is bundled
 #  with this source code in the file LICENSE.
 #}
<?php

{% if config.header %}{{ config.header }}{% endif %}

namespace {{ class.namespace }};

{% for use in class.uses %}
use {{ use }};
{% endfor %}

/**
{% for annotation in class.annotations %}
 * {{ annotation }}
{% endfor %}
 */
{% if class.abstract %}abstract {% endif %}class {{ class.name }}{% if class.parent %} extends {{ class.parent }}{% endif %}{% if class.interfaceName %} implements {{ class.interfaceName }}{% endif %}

{
{% for constant in class.constants %}
    /**
{% for annotation in constant.annotations %}
     * {{ annotation }}
{% endfor %}
     */
    const {{ constant.name }} = '{{ constant.value }}';
{% endfor %}

{% for field in class.fields %}
    /**
{% for annotation in field.annotations %}
     * {{ annotation }}
{% endfor %}
     */
    {{ config.fieldVisibility }} ${{ field.name }}{% if field.isArray and (field.isEnum or not field.typeHint or not config.doctrine.useCollection) %} = []{% endif %};
{% endfor %}

{% if config.doctrine.useCollection and class.hasConstructor %}
    public function __construct()
    {
{% if class.parentHasConstructor %}
        parent::__construct();

{% endif %}
{% for field in class.fields %}
{% if config.doctrine.useCollection and field.isArray and field.typeHint and not field.isEnum %}
        $this->{{ field.name }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }
{% endif %}

{% for field in class.fields %}
{% if field.isArray %}
    /**
{% for annotation in field.adderAnnotations %}
     * {{ annotation }}
{% endfor %}
     */
    public function add{{ field.name|ucfirst }}({% if field.typeHint and not field.isEnum %}{{ field.typeHint }} {% endif %}${{ field.name }})
    {
        $this->{{ field.name }}[] = {% if field.isEnum %}(string) {% endif %}${{ field.name }};

        return $this;
    }

    /**
{% for annotation in field.removerAnnotations %}
     * {{ annotation }}
{% endfor %}
     */
    public function remove{{ field.name|ucfirst }}({% if field.typeHint %}{{ field.typeHint }} {% endif %}${{ field.name }})
    {
        if (true === $this->{{ field.name }}->contains({% if field.isEnum %}(string) {% endif %}${{ field.name }})) {
            $this->{{ field.name }}->removeElement({% if field.isEnum %}(string) {% endif %}${{ field.name }});
        }

        return $this;
    }
{% else %}
    /**
{% for annotation in field.setterAnnotations %}
     * {{ annotation }}
{% endfor %}
     */
    public function set{{ field.name|ucfirst }}({% if field.typeHint %}{{ field.typeHint }} {% endif %}${{ field.name }}{% if field.typeHint and field.isNullable %} = null{% endif %})
    {
        $this->{{ field.name }} = ${{ field.name }};

        return $this;
    }
{% endif %}

    /**
{% for annotation in field.getterAnnotations %}
     * {{ annotation }}
{% endfor %}
     */
    public function get{{ field.name|ucfirst }}()
    {
        return $this->{{ field.name }};
    }

{% endfor %}
}
